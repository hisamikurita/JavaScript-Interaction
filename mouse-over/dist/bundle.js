!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.r(n);var o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.mouse={x:0,y:0}}var n,t,o;return n=e,(t=[{key:"mousemove",value:function(e){this.mouse.x=e.clientX,this.mouse.y=e.clientY}}])&&r(n.prototype,t),o&&r(n,o),e}();function i(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=new o;window.addEventListener("mousemove",(function(e){a.mousemove(e)}));var u=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.elm=document.getElementById(n),this.elmWidth=this.elm.clientWidth,this.elmHeight=this.elm.clientHeight,this.height=window.innerHeight,this.pos={x:0,y:0},this.friction=.2}var n,t,r;return n=e,(t=[{key:"update",value:function(){var e=this;TweenMax.to({},.001,{repeat:-1,onRepeat:function(){e.pos.x+=(a.mouse.x-e.pos.x)*e.friction,e.pos.y+=(a.mouse.y-e.pos.y)*e.friction,TweenMax.set(e.elm,{x:e.pos.x-e.elmWidth/2,y:e.pos.y-e.elmHeight/2}),e.pos.y<=0+e.elmHeight/4||e.pos.y>=e.height-e.elmHeight/4?TweenMax.to(e.elm,.2,{opacity:0,scale:2.6}):TweenMax.to(e.elm,.2,{opacity:1,scale:1})}})}}])&&i(n.prototype,t),r&&i(n,r),e}();function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}var n,t,r;return n=e,r=[{key:"norm",value:function(e,n,t){return(e-n)/(t-n)}},{key:"lerp",value:function(e,n,t){return(t-n)*e+n}},{key:"map",value:function(n,t,r,o,i){return e.lerp(e.norm(n,t,r),o,i)}},{key:"clamp",value:function(e,n,t){return Math.min(Math.max(e,Math.min(n,t)),Math.max(n,t))}},{key:"distance",value:function(e,n){var t=n.x-e.x,r=n.y-e.y;return Math.sqrt(t*t+r*r)}},{key:"distanceXY",value:function(e,n,t,r){var o=t-e,i=r-n;return Math.sqrt(o*o+i*i)}},{key:"circleCollision",value:function(n,t){return e.distance(n,t)<=n.radius+t.radius}},{key:"circlePointCollision",value:function(n,t,r){return e.distanceXY(n,t,r.x,r.y)<r.radius}},{key:"pointInRect",value:function(n,t,r){return e.inRange(n,r.x,r.x+r.width)&&e.inRange(t,r.y,r.y+r.height)}},{key:"pointDomInRect",value:function(n,t,r){return e.inRange(n,r.left,r.left+r.clientWidth)&&e.inRange(t,r.top,r.top+r.clientheight)}},{key:"inRange",value:function(e,n,t){return e>=Math.min(n,t)&&e<=Math.max(n,t)}},{key:"rangeIntersect",value:function(e,n,t,r){return Math.max(e,n)>=Math.min(t,r)&&Math.min(e,n)<=Math.max(t,r)}},{key:"rectIntersect",value:function(n,t){return e.rangeIntersect(n.x,n.x+n.width,t.x,t.x+t.width)&&e.rangeIntersect(n.y,n.y+n.height,t.y,t.y+t.height)}},{key:"degreesToRads",value:function(e){return e/180*Math.PI}},{key:"radsToDegrees",value:function(e){return 180*e/Math.PI}},{key:"randomRange",value:function(e,n){return e+Math.random()*(n-e)}},{key:"randomInt",value:function(e,n){return Math.floor(e+Math.random()*(n-e+1))}},{key:"randomDist",value:function(n,t,r){for(var o=0,i=0;i<r;i+=1)o+=e.randomRange(n,t);return o/r}},{key:"randomColor",value:function(e){return e[Math.floor(Math.random()*e.length)]}}],(t=null)&&c(n.prototype,t),r&&c(n,r),e}();window.addEventListener("load",(function(){var e=new o;window.addEventListener("mousemove",(function(n){e.mousemove(n)})),new u("circle").update();var n,t,r=document.getElementById("slider"),i=0,a=0,c=0,s=0,f=!1;function m(e){e.preventDefault(),f=!0,i=e.clientX,window.addEventListener("mousemove",d),n=TweenMax.to({},.001,{repeat:-1,onRepeat:function(){s+=.04*(a-s),t=TweenMax.set(r,{x:s})}})}function d(e){!0===f&&(a=l.clamp(e.clientX-i+c,-980,0),window.addEventListener("mouseup",v))}function v(e){e.preventDefault(),f=!1,c=a,window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",v),setTimeout((function(){n.pause(),t.pause()}),1400)}r.addEventListener("mousedown",m)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,